---
title: "ST346 Generalized Linear Models for Regression and Classification - Coursework 1"
author: "Your Name"
date: today
format:
  pdf:
    toc: true
    toc-depth: 2
    number-sections: true
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
library(ggplot2)
library(tidyverse)
```

# Data Loading and Exploration

```{r data-loading}
# Objective: Load and explore the dataset
load("CourseworkData1.rda")

# Display structure of 'cleaners' dataset
str(cleaners)

# Display first few rows of 'cleaners'
head(cleaners)

# Display structure of 'mushrooms' dataset
str(mushrooms)

# Display first few rows of 'mushrooms'
head(mushrooms)
```

# Question 1: Weighted Regression

## Part a: Data Visualization

```{r q1a-visualization}
# Question 1(a): Create a suitable plot of the data and discuss the linear relationship
# Objective: Visualize the relationship between team size and offices cleaned

plot <- ggplot(cleaners, aes(x = Staff, y = Offices)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE, color = "red") +
  labs(title = "Relationship between Team Size and Offices Cleaned",
       x = "Number of Staff",
       y = "Number of Offices Cleaned") +
  theme_minimal()

print(plot)

correlation <- cor(cleaners$Staff, cleaners$Offices)
print(paste("Correlation coefficient:", round(correlation, 3)))

summary(cleaners)
```

## Part b: Linear Model Fitting

```{r q1b-linear-model}
# Question 1(b): Fit a normal linear model and interpret the slope coefficient
# Objective: Fit a linear model predicting offices cleaned from team size

model <- lm(Offices ~ Staff, data = cleaners)
summary(model)

slope <- coef(model)["Staff"]
print(paste("Slope coefficient:", round(slope, 3)))

conf_interval <- confint(model)["Staff", ]
print("95% Confidence Interval for the slope:")
print(conf_interval)
```

## Part c: Residual Analysis

```{r q1c-residual-analysis}
# Question 1(c): Produce and evaluate a residuals versus fitted values plot
# Objective: Analyze the residuals of the linear model

plot_data <- data.frame(
  Fitted = fitted(model),
  Residuals = residuals(model)
)

residual_plot <- ggplot(plot_data, aes(x = Fitted, y = Residuals)) +
  geom_point() +
  geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
  labs(title = "Residuals vs Fitted Values",
       x = "Fitted Values",
       y = "Residuals") +
  theme_minimal()

print(residual_plot)

par(mfrow = c(2,2))
plot(model)
```

## Part d: Variance Estimation

```{r q1d-variance-estimation}
# Question 1(d): Reproduce the variance estimates for each team size
# Objective: Calculate and verify the variance estimates for different team sizes

variance_table <- aggregate(Offices ~ Staff, data = cleaners, FUN = var)
names(variance_table) <- c("Team_size", "Variance")
variance_table$Variance <- round(variance_table$Variance, 2)

print(variance_table)

given_values <- data.frame(
  Team_size = c(2, 4, 6, 8, 10, 12, 16),
  Given_Variance = c(9.00, 24.67, 22.00, 44.12, 62.84, 53.14, 144.01)
)

comparison <- merge(variance_table, given_values, by = "Team_size", all = TRUE)
comparison$Difference <- round(comparison$Variance - comparison$Given_Variance, 2)

print(comparison)

all_match <- all(abs(comparison$Difference) < 0.01)
print(paste("All calculated variances match given values:", all_match))
```

## Part e: Weight Calculation

```{r q1e-weight-calculation}
# Question 1(e): Derive and compute weight estimates
# Objective: Calculate weights based on variance estimates and add to the dataset

base_variance <- variance_table$Variance[variance_table$Team_size == 2]
variance_table$Weight <- base_variance / variance_table$Variance

print(variance_table)

assign_weight <- function(staff_size) {
  weight <- variance_table$Weight[variance_table$Team_size == staff_size]
  return(weight)
}

cleaners$Weight <- sapply(cleaners$Staff, assign_weight)

head(cleaners)
summary(cleaners$Weight)
```

## Part f: Weighted Linear Model

```{r q1f-weighted-model}
# Question 1(f): Fit a weighted normal linear model and analyze weighted residuals
# Objective: Fit and evaluate a weighted linear regression model

weighted_model <- lm(Offices ~ Staff, data = cleaners, weights = Weight)
summary(weighted_model)

plot_data <- data.frame(
  Fitted = fitted(weighted_model),
  Weighted_Residuals = residuals(weighted_model, type = "response") * sqrt(cleaners$Weight)
)

residual_plot <- ggplot(plot_data, aes(x = Fitted, y = Weighted_Residuals)) +
  geom_point() +
  geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
  labs(title = "Weighted Residuals vs Fitted Values",
       x = "Fitted Values",
       y = "Weighted Residuals") +
  theme_minimal()

print(residual_plot)

par(mfrow = c(2,2))
plot(weighted_model)
```

## Part g: Transformed Model

```{r q1g-transformed-model}
# Question 1(g): Derive and fit the model on the transformed scale
# Objective: Transform the model and compare with the weighted model

cleaners$Y_star <- cleaners$Offices * sqrt(cleaners$Weight)
cleaners$x_star <- cleaners$Staff * sqrt(cleaners$Weight)
cleaners$intercept_star <- sqrt(cleaners$Weight)

transformed_model <- lm(Y_star ~ 0 + intercept_star + x_star, data = cleaners)
summary(transformed_model)

cat("Transformed model coefficients:\n")
print(coef(transformed_model))
cat("\nWeighted model coefficients:\n")
print(coef(weighted_model))

cat("\nTransformed model standard errors:\n")
print(sqrt(diag(vcov(transformed_model))))
cat("\nWeighted model standard errors:\n")
print(sqrt(diag(vcov(weighted_model))))
```

## Part h: Residual Comparison

```{r q1h-residual-comparison}
# Question 1(h): Verify the equivalence of weighted and transformed model residuals
# Objective: Compare residuals from weighted and transformed models

weighted_residuals <- residuals(weighted_model, type = "response") * sqrt(cleaners$Weight)
transformed_residuals <- residuals(transformed_model)

residual_difference <- weighted_residuals - transformed_residuals

cat("Summary of residual differences:\n")
print(summary(residual_difference))

all_same <- all(abs(residual_difference) < 1e-10)
cat("\nAre all residuals essentially the same? ", all_same)

plot(weighted_residuals, transformed_residuals, 
     main = "Weighted vs Transformed Residuals",
     xlab = "Weighted Residuals", ylab = "Transformed Residuals")
abline(0, 1, col = "red")

residual_correlation <- cor(weighted_residuals, transformed_residuals)
cat("\nCorrelation between residuals: ", residual_correlation)
```

# Question 2: Logistic Regression

## Part a: Logistic Regression Model

```{r q2a-logistic-model}
# Question 2(a): Derive the probability expression for the logistic model
# Objective: Illustrate the logistic function for mushroom classification

probability_poisonous <- function(diameter, alpha, beta) {
  1 / (1 + exp(-alpha - beta * diameter))
}

diameters <- seq(0, 20, by = 0.1)
probabilities <- probability_poisonous(diameters, alpha = -2, beta = 0.5)

df <- data.frame(Diameter = diameters, Probability = probabilities)

ggplot(df, aes(x = Diameter, y = Probability)) +
  geom_line() +
  labs(title = "Probability of Mushroom Being Poisonous vs. Cap Diameter",
       x = "Cap Diameter (cm)",
       y = "Probability of Being Poisonous") +
  theme_minimal()
```

## Part b: Odds Ratio Calculation

```{r q2b-odds-ratio}
# Question 2(b): Calculate odds ratio for mushrooms with different cap diameters
# Objective: Fit logistic model and interpret odds ratios

model <- glm(Class ~ Diameter, data = mushrooms, family = binomial)
summary(model)

beta <- coef(model)["Diameter"]
odds_ratio <- exp(beta * 5)

cat("Odds ratio for a mushroom with 10 cm cap diameter vs 5 cm cap diameter:", round(odds_ratio, 4), "\n")

ci <- exp(confint(model)["Diameter",] * 5)
cat("95% Confidence Interval for the odds ratio:", round(ci, 4), "\n")

prob_5cm <- predict(model, newdata = data.frame(Diameter = 5), type = "response")
prob_10cm <- predict(model, newdata = data.frame(Diameter = 10), type = "response")

cat("Probability of being poisonous for 5 cm diameter:", round(prob_5cm, 4), "\n")
cat("Probability of being poisonous for 10 cm diameter:", round(prob_10cm, 4), "\n")
```

## Part c: Empirical Relationship Plot

```{r q2c-empirical-plot}
# Question 2(c): Create plots showing the empirical relationship between Diameter and Class
# Objective: Visualize the relationship between cap diameter and mushroom class

p1 <- ggplot(mushrooms, aes(x = Diameter, y = as.numeric(Class) - 1)) +
  geom_jitter(alpha = 0.3, height = 0.05) +
  scale_y_continuous(breaks = c(0, 1), labels = c("Edible", "Poisonous")) +
  labs(title = "Relationship between Mushroom Cap Diameter and Class",
       x = "Cap Diameter (cm)", y = "Class") +
  theme_minimal()

p2 <- ggplot(mushrooms, aes(x = Diameter, y = as.numeric(Class) - 1)) +
  geom_smooth(method = "loess", se = TRUE) +
  scale_y_continuous(labels = scales::percent) +
  labs(title = "Smoothed Probability of Mushroom being Poisonous",
       x = "Cap Diameter (cm)", y = "Probability of being Poisonous") +
  theme_minimal()

print(p1)
print(p2)

summary_data <- mushrooms %>%
  group_by(Diameter) %>%
  summarise(prob_poisonous = mean(Class == "poisonous"))

head(summary_data)
```

## Part d: Quadratic Logistic Regression

```{r q2d-quadratic-model}
# Question 2(d): Fit a quadratic logistic regression model and plot predicted probabilities
# Objective: Explore non-linear relationships in mushroom classification

quadratic_model <- glm(Class ~ Diameter + I(Diameter^2), data = mushrooms, family = binomial)

new_data <- data.frame(Diameter = seq(min(mushrooms$Diameter), max(mushrooms$Diameter), length.out = 200))
new_data$Probability <- predict(quadratic_model, newdata = new_data, type = "response")

p <- ggplot(new_data, aes(x = Diameter, y = Probability)) +
  geom_line() +
  geom_point(data = mushrooms, aes(y = as.numeric(Class) - 1), alpha = 0.1) +
  labs(title = "Predicted Probability of Mushroom being Poisonous",
       x = "Cap Diameter (cm)", 
       y = "Probability of being Poisonous") +
  theme_minimal()

print(p)
summary(quadratic_model)
```

## Part e: Probability Threshold Analysis

```{r q2e-threshold-analysis}
# Question 2(e): Identify cap diameters with predicted probability of being poisonous below 50%
# Objective: Analyze and visualize probability thresholds for mushroom classification

diameters <- seq(round(min(mushrooms$Diameter) * 2) / 2, 
                 round(max(mushrooms$Diameter) * 2) / 2, 
                 by = 0.5)

pred_data <- data.frame(Diameter = diameters)
pred_data$Probability <- predict(quadratic_model, newdata = pred_data, type = "response")

safe_diameters <- pred_data[pred_data$Probability < 0.5, ]

cat("Cap diameters (to nearest 0.5 cm) where predicted probability of being poisonous is below 50%:\n")
print(safe_diameters$Diameter)

ggplot(pred_data, aes(x = Diameter, y = Probability)) +
  geom_line() +
  geom_point(data = safe_diameters, color = "red", size = 3) +
  geom_hline(yintercept = 0.5, linetype = "dashed", color = "blue") +
  labs(title = "Predicted Probability of Mushroom being Poisonous",
       subtitle = "Red points indicate diameters with <50% probability",
       x = "Cap Diameter (cm)", 
       y = "Probability of being Poisonous") +
  theme_minimal()
```